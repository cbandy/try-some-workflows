# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions

name: Google GKE
description: Manage a GKE cluster for one job

inputs:
  stage:
    required: true
    description: >
      One of "setup", "teardown", or "versions"

  k8s-release:
    default: latest
    required: true
    description: >
      One or more Kubernetes release(s) e.g. "v1.20",
      or "all" or "latest"

  cluster-data:
    description: >
      JSON object from the setup stage that is required for teardown

outputs:
  versions:
    value: ${{ steps.versions.outputs.matrix }}
    description: >
      JSON array of Kubernetes releases understood by GKE

  cluster-data:
    value: ${{ steps.create.outputs.data }}
    description: >
      JSON object that should be passed back to the teardown stage

runs:
  using: composite
  steps:
    # Evaluate the requested Kubernetes release.
    - id: versions
      shell: bash
      env:
        # Recent versions are available only in the Rapid channel.
        # - https://cloud.google.com/kubernetes-engine/docs/release-schedule
        CHANNELS: |
          v1.20: stable
          v1.21: stable
          v1.22: regular
          v1.23: rapid
          v1.24: rapid
        KUBERNETES: ${{ inputs.k8s-release }}
      run: |
        # Check Kubernetes versions

        CHANNELS=$(yq -o json <<< "${CHANNELS}")
        VERSIONS=$(jq --compact-output 'keys' <<< "${CHANNELS}")

        if [[ "${KUBERNETES}" == 'all' ]]; then
          : # Use the entire JSON array of known versions.

        elif [[ "${KUBERNETES}" == 'latest' ]]; then
          # Split the JSON array into lines, sort them, and use the greatest.
          VERSIONS=$(jq '.[]' <<< "${VERSIONS}")
          VERSIONS=$(sort -V <<< "${VERSIONS}")
          VERSIONS=$(jq '[last]' <<< "${VERSIONS}" --compact-output --slurp)

        else
          # Split the input words into lines then make a JSON array.
          KUBERNETES=$(xargs -n1 echo <<< "${KUBERNETES//,/ }")
          KUBERNETES=$(jq --raw-input <<< "${KUBERNETES}" | jq --slurp)

          # Look for unexpected input by removing the available versions.
          UNKNOWN=$(jq -n '$ask - $known' \
            --argjson ask "${KUBERNETES}" \
            --argjson known "${VERSIONS}")

          if [[ "${UNKNOWN}" != '[]' ]]; then
            echo >&2 Unexpected Kubernetes versions!
            echo >&2 "${UNKNOWN}"
            exit 1
          fi

          # All the input is valid; use it.
          VERSIONS=$(jq --compact-output <<< "${KUBERNETES}")
        fi

        # Lookup the channel when there is only one selected version.
        if [[ $(jq 'length' <<< "${VERSIONS}") == '1' ]]; then
          CHANNEL=$(yq ".${VERSIONS}" <<< "${CHANNELS}")
        fi

        echo ::set-output "name=channel::${CHANNEL-}"
        echo ::set-output "name=matrix::${VERSIONS}"

    - if: ${{ inputs.stage == 'setup' || inputs.stage == 'teardown' }}
      shell: bash
      run: |
        echo gcloud auth activate-service-account --key-file=FIXME

    - id: create
      if: ${{ inputs.stage == 'setup' }}
      shell: bash
      env:
        CHANNEL: ${{ steps.versions.outputs.channel }}
        KUBERNETES: ${{ inputs.k8s-release }}
      run: |
        # Create GKE cluster (${{ inputs.k8s-release }})

        export CLUSTER="ci-v5-${CHANNEL:?}-k${KUBERNETES//.}-gh${GITHUB_RUN_ID}"
        export PROJECT='FIXME'
        export ZONE='us-east1-b'

        echo gcloud container clusters create "${CLUSTER}" \
          --project "${PROJECT}" --zone "${ZONE}" \
          --enable-autorepair \
          --enable-autoupgrade \
          --cluster-ipv4-cidr '/19' \
          --machine-type 'e2-standard-4' --num-nodes 2 \
          --cluster-version "${KUBERNETES/v}" --node-version "${KUBERNETES/v}" \
          --release-channel "${CHANNEL}"

        CLUSTER_DATA=$(jq -n --compact-output '$ENV | { CLUSTER, PROJECT, ZONE }')
        echo ::set-output "name=data::${CLUSTER_DATA}"

    - if: ${{ inputs.stage == 'teardown' }}
      shell: bash
      env:
        CLUSTER_DATA: ${{ inputs.cluster-data }}
      run: |
        # Delete GKE cluster

        export $(jq --raw-output <<< "${CLUSTER_DATA}" '
          to_entries[] | "\(.key)=\(.value)"
        ')

        echo gcloud container clusters delete "${CLUSTER}" \
          --project "${PROJECT}" --zone "${ZONE}" \
          --quiet
