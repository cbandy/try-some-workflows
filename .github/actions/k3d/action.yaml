# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions

name: k3d
description: Manage a k3s cluster for one job

inputs:
  stage:
    required: true
    description: >
      One of "setup" or "versions"

  k3d-tag:
    default: latest
    required: true
    description: >
      Git tag from https://github.com/rancher/k3d/releases or "latest"

  k8s-release:
    default: latest
    required: true
    description: >
      One or more Kubernetes release(s) e.g. "v1.20",
      or "all" or "latest"

outputs:
  versions:
    value: ${{ steps.versions.outputs.matrix }}
    description: >
      JSON array of Kubernetes releases available to k3d

runs:
  using: composite
  steps:
    # Evaluate the requested Kubernetes release.
    - id: versions
      if: ${{ inputs.stage == 'versions' }}
      shell: bash
      env:
        KUBERNETES: ${{ inputs.k8s-release }}
      run: |
        # Check Kubernetes versions

        CHANNELS=$(curl -sL 'https://update.k3s.io/v1-release/channels')
        VERSIONS=$(jq --compact-output <<< "${CHANNELS}" '
          .data | map(.name | select(test("^v[0-9.]+$")))
        ')

        if [[ "${KUBERNETES}" == 'all' ]]; then
          : # Use the entire JSON array of known versions.

        elif [[ "${KUBERNETES}" == 'latest' ]]; then
          # Split the JSON array into lines, sort them, and use the greatest.
          VERSIONS=$(jq '.[]' <<< "${VERSIONS}")
          VERSIONS=$(sort -V <<< "${VERSIONS}")
          VERSIONS=$(jq '[last]' <<< "${VERSIONS}" --compact-output --slurp)

        else
          # Split the input words into lines then make a JSON array.
          KUBERNETES=$(xargs -n1 echo <<< "${KUBERNETES//,/ }")
          KUBERNETES=$(jq --raw-input <<< "${KUBERNETES}" | jq --slurp)

          # Look for unexpected input by removing the available versions.
          UNKNOWN=$(jq -n '$ask - $known' \
            --argjson ask "${KUBERNETES}" \
            --argjson known "${VERSIONS}")

          if [[ "${UNKNOWN}" != '[]' ]]; then
            echo >&2 Unexpected Kubernetes versions!
            echo >&2 "${UNKNOWN}"
            exit 1
          fi

          # All the input is valid; use it.
          VERSIONS=$(jq --compact-output <<< "${KUBERNETES}")
        fi

        echo ::set-output "name=matrix::${VERSIONS}"

    - id: k3d
      if: ${{ inputs.stage == 'setup' }}
      shell: bash
      env:
        K3D_TAG: ${{ inputs.k3d-tag }}
      run: |
        curl --fail --silent https://raw.githubusercontent.com/rancher/k3d/main/install.sh |
          TAG="${K3D_TAG#latest}" bash
        k3d version | awk '{ print "::set-output name=" tolower($1) "::" $3 }'

    - id: k3s
      if: ${{ inputs.stage == 'setup' }}
      shell: bash
      run: |
        k3d cluster create --image '+${{ inputs.k8s-release }}' --no-lb --timeout=2m --wait
        kubectl version --short | awk '{ print "::set-output name=" tolower($1) "::" $3 }'
