# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: KUTTL
on:
  workflow_call:
    inputs:
      kubernetes:
        required: true
        type: string
        description: >
          The Kubernetes release â€¦ FIXME

      base-image-matrix:
        required: true
        type: string
        description: >
          JSON array of (OS) base images to test

      postgresql-matrix:
        required: true
        type: string
        description: >
          JSON array of PostgreSQL major versions to test

jobs:
  kubernetes-setup:
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.gather.outputs.kubeconfig }}
      opaque: ${{ steps.gather.outputs.opaque }}
    steps:
      - uses: actions/checkout@v3

      - id: google-gke
        if: ${{ github.event.inputs.kubernetes-provider == 'GKE' }}
        uses: ./.github/actions/google-gke
        with:
          stage: setup
          k8s-release: ${{ inputs.kubernetes }}

      - id: gather
        name: Kubernetes credentials
        env:
          GOOGLE_GKE_CONFIG: ${{ steps.google-gke.outputs.kubeconfig }}
          GOOGLE_GKE_DATA: ${{ steps.google-gke.outputs.cluster-data }}
        run: |
          K8S_CONFIG=$(jq -n '$gke + $more' \
            --argjson gke "${GOOGLE_GKE_CONFIG:-{\}}" \
            --argjson more "{}" \
            --compact-output)

          K8S_DATA=$(jq -n '$gke + $more' \
            --argjson gke "${GOOGLE_GKE_DATA:-{\}}" \
            --argjson more "{}" \
            --compact-output)

          echo ::set-output "name=kubeconfig::${K8S_CONFIG}"
          echo ::set-output "name=opaque::${K8S_DATA}"

  test-ubi8:
    if: ${{ contains(fromJSON(inputs.base-image-matrix), 'ubi8') }}
    needs:
      - kubernetes-setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        postgresql: ${{ fromJSON(inputs.postgresql-matrix) }}
    steps:
      - uses: actions/checkout@v3

      # k3d runs Kubernetes in a Docker container on the same machine as the tests.
      - if: ${{ github.event.inputs.kubernetes-provider == 'k3d' }}
        uses: ./.github/actions/k3d
        with:
          stage: setup
          k8s-release: ${{ inputs.kubernetes }}

      - env:
          K8S_CONFIG: ${{ needs.kubernetes-setup.outputs.kubeconfig }}
        run: |
          install --directory ~/.kube
          test "${K8S_CONFIG}" != '{}' || exit 0
          echo "${K8S_CONFIG}" > ~/.kube/config

      - id: namespace
        env:
          NAMESPACE: gh${{github.run_id}}-ubi8-${{matrix.postgresql}}
        run: |
          echo kubectl create namespace "${NAMESPACE}"
          echo ::set-output "name=name::${NAMESPACE}"

      - uses: actions/checkout@v3
        with:
          repository: CrunchyData/postgres-operator
          path: work/postgres-operator
          # TODO: select a git-ref for the installer and tests
          # FIXME: should these two things be separate?

      - run: |
          echo Deploy to '${{ steps.namespace.outputs.name }}'
          # TODO: calculate related images from '${{ matrix.base-image }}'
          make -C work/postgres-operator --dry-run deploy

      - env:
          KUTTL_PG_VERSION: ${{ matrix.postgresql }}
        run: |
          make -C work/postgres-operator --dry-run generate-kuttl check-kuttl

      - if: ${{ always() }}
        run: |
          # TODO: delete and wait for KUTTL namespacesâ€¦
          # Delete namespace
          echo kubectl delete namespace '${{ steps.namespace.output.name }}'

  test-ubi9:
    if: ${{ contains(fromJSON(inputs.base-image-matrix), 'ubi9') }}
    needs:
      - kubernetes-setup
      - test-ubi8
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo >&2 Not implemented!
          exit 1

  kubernetes-teardown:
    if: ${{ always() }}
    needs:
      - kubernetes-setup
      - test-ubi8
      - test-ubi9
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: google-gke
        if: ${{ github.event.inputs.kubernetes-provider == 'GKE' }}
        uses: ./.github/actions/google-gke
        with:
          stage: teardown
          k8s-release: ${{ inputs.kubernetes }}
          cluster-data: ${{ needs.kubernetes-setup.outputs.opaque }}
